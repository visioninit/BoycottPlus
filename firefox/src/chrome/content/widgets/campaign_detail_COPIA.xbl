<?xml version="1.0" encoding="UTF-8"?>

<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:html="http://www.w3.org/1999/xhtml">
	<binding id="boycottPlusDetail">
		<content>  
		
			<xul:vbox style="background-color: #CCC;" flex="1">
				<xul:label id="title" value="" />
				<xul:label class="text-link" onclick="/*window.close()*/;boycottplus.newTab('www.boycottplus.org');" value="Visit Campaign Website" />
				<xul:checkbox id="displayChanges" label="Display campaign website in new tab on Campaign changes" />
				<xul:hbox>
					<xul:label value="Update Frecuency" />
					<xul:menulist id="frecuency">
						<xul:menupopup>
							<xul:menuitem value="0" label="Let me do it" />
							<xul:menuitem value="1" label="Daily" />
							<xul:menuitem value="2" label="Weekly" />
							<xul:menuitem value="3" label="Monthly" />
						</xul:menupopup>
					</xul:menulist>
					<xul:label id="lastUpdated" value="" />
					<xul:button label="Update Now" oncommand="" />
				</xul:hbox>
				<xul:vbox id="companiesDetails" style="background-color: #FFF; height: 300px; width: 250px; overflow: auto;">
					<!-- Campaign Details Here -->
				</xul:vbox>
				<xul:vbox>
					<xul:label value="Boycott Rule Degree" />
					<xul:radiogroup id="notificationType">
						<xul:radio value="0" label="Disabled - These rules are ignored, you can visit campaign sites with no notification."/>
						<xul:radio value="1" label="Banner Notify - The website will still load, but you will be provided with an informational banner containing boycott details if you visit a website that is boycotted."/>
						<xul:radio value="2" label="Block Site - A Boycott Plus page will be displayed instead of the boycotted site, an override option will be presented."/>
					</xul:radiogroup>
				</xul:vbox>
				<xul:hbox id="buttonsBox">
					<!-- Buttons Here -->
				</xul:hbox>
			</xul:vbox>
	
		</content>
		<implementation>
			<constructor><![CDATA[

				// Create unload event if the user closes the window in any way.
				window.addEventListener("unload", function onUnload(){
					boycottPlus.newCampaign = false;
					window.removeEventListener("load", onUnload, true);
				});
				
				function clone(obj) {
					if (null == obj || "object" != typeof obj) return obj;
					var copy = obj.constructor();
					for (var attr in obj) {
						if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
					}
					return copy;
				}
				
				// For html-only elements.
				var htmlNS = 'http://www.w3.org/1999/xhtml';

				if (boycottPlus.newCampaign) {
					// Get the New Campaign.
					var address = boycottPlus.newBoycottJSON.source;
					var JSON = boycottPlus.newBoycottJSON.JSON;
					var nueva = { "domainToCompanies" : { }, "tracked" : { } };
									
					var boycott = clone(JSON);
					
					var companies = clone(boycott.company);
					
					delete boycott.company;
										
					// Just for now... until Json data is renewed.
					boycott.notificationType = boycottplus.prefs.getCharPref('notificationType');
					boycott.updateFrecuency = boycottplus.prefs.getCharPref('updateFrecuency');
					boycott.displayChanges = boycottplus.prefs.getBoolPref('displayChanges');

					for (var i in companies) {
						if (!companies.hasOwnProperty(i)) { continue; }
						var domains = companies[i].domains;
						
						for (var j in domains) {
							if (!domains.hasOwnProperty(j)) { continue; }
							var tmp = clone(companies[i]);
							
							tmp._src = address;
							tmp._boycott = clone(boycott);
							tmp._boycott.notificationType = boycottplus.prefs.getCharPref('notificationType');
							
							if (nueva.domainToCompanies[domains[j]]) {
								nueva.domainToCompanies[domains[j]].push(tmp);
							} else {
								nueva.domainToCompanies[domains[j]] = [tmp];
							}
						}
					}
					companies = nueva.domainToCompanies;
				} else {
					// Get the Selected Campaign.
					var address = boycottPlus.selectedCampaign.getAttribute('address');
					var JSON = boycottPlus.data._data.tracked[address];
					var companies = boycottPlus.data._data.domainToCompanies;
				}

				var bound = this;
				
				var title = document.getAnonymousElementByAttribute(bound, 'id', 'title');
				title.setAttribute('value', JSON.name);
				
				var displayChanges = document.getAnonymousElementByAttribute(bound, 'id', 'displayChanges');
				displayChanges.setAttribute('checked', JSON.displayChanges);
				
				var frecuency = document.getAnonymousElementByAttribute(bound, 'id', 'frecuency');	
					switch (JSON.updateFrecuency) {
						case '0':
						default:
							frecuency.getItemAtIndex('0').setAttribute('selected', 'true');
							break;
						case '1':
							frecuency.getItemAtIndex('1').setAttribute('selected', 'true');
							break;
						case '2':
							frecuency.getItemAtIndex('2').setAttribute('selected', 'true');
							break;
						case '3':
							frecuency.getItemAtIndex('3').setAttribute('selected', 'true');
							break;
					}
				
				var arrayTemp = [];

				var lastUpdated = document.getAnonymousElementByAttribute(bound, 'id', 'lastUpdated');
					var fecha = new Date(JSON.updatedDate * 1000);
					lastUpdated.setAttribute('value', 'Last Updated: '+ fecha.getDate() + '/' + fecha.getMonth() + '/' + fecha.getFullYear());
				
				var campaignsBox = document.getAnonymousElementByAttribute(bound, 'id', 'companiesDetails');
					for(var company in companies) {
						// For each company in the Campaign.

						for(var j in companies[company]) {
							
							if (companies[company][j]._src == address ) {
								
								var thisCompany = companies[company][j];
								var sameCompany = false;
								for(var i in arrayTemp) {
									if ( arrayTemp[i].companyId == companies[company][j].companyId ) {
										sameCompany = true;
									}
								}

								if ( sameCompany ) continue;

								var companyBox = document.createElement('vbox');
									
									var titleBox = document.createElement('hbox');
										var collapseExpand = document.createElement('label');
											collapseExpand.setAttribute('value', '+');
											collapseExpand.setAttribute('width', '10px');
											collapseExpand.setAttribute('onclick', 'changeCollapseExpand(this);');
											
										var companyName = document.createElement('label');
										companyName.setAttribute('value', thisCompany.companyName);
										
										var companyRuleCount = document.createElement('label');
										
										var ruleCount = 0;
										var ruleList = document.createElementNS(htmlNS, 'ul');
										thisCompany.domains.forEach(function(rule) {
											var ruleListItem = document.createElementNS(htmlNS, 'li');
												var ruleText = document.createTextNode(rule);
												ruleListItem.appendChild(ruleText);
											ruleList.appendChild(ruleListItem);
											
											ruleCount++;
										});
										companyRuleCount.setAttribute('value', ruleCount + ' Boycott Rules');
										
										var learnMore = document.createElement('label');
										learnMore.classList.add('text-link');
										learnMore.setAttribute('value', 'Learn more.');
										learnMore.setAttribute('onclick', 'boycottplus.newTab("'+thisCompany.learnMore+'")');
										
									titleBox.appendChild(collapseExpand);
									titleBox.appendChild(companyName);
									titleBox.appendChild(companyRuleCount);
									if (thisCompany.learnMore!=''){ titleBox.appendChild(learnMore); };
									
									var companyEvidence = document.createElement('label');
										companyEvidence.setAttribute('value', thisCompany.causeEvidence);
		
									var companyCauseDetails = document.createElementNS(htmlNS , 'ul');
										thisCompany.causeDetail.forEach(function(detail) {
											var details = document.createElementNS(htmlNS , 'li');
												var causeText = document.createTextNode(detail);
												details.appendChild(causeText);
											companyCauseDetails.appendChild(details);
										});	
										
									var ruleBox = document.createElement('vbox');
										ruleBox.setAttribute('hideBox', '');
										ruleBox.classList.add('ruleHide');
									
										var rulesLabel = document.createElement('label');
											rulesLabel.setAttribute('value', 'Rules for this Company');
										
									ruleBox.appendChild(rulesLabel);
									ruleBox.appendChild(ruleList);
										
								companyBox.appendChild(titleBox);
								companyBox.appendChild(companyEvidence);
								companyBox.appendChild(companyCauseDetails);
								companyBox.appendChild(ruleBox);
								campaignsBox.appendChild(companyBox);
								
								arrayTemp.push(thisCompany);
							}
							
						}
					}
				var notificationType = document.getAnonymousElementByAttribute(bound, 'id', 'notificationType');
					switch (JSON.notificationType) {
						case '0':
							notificationType.getItemAtIndex('0').setAttribute('selected', 'true');
							break;
						case '1':
						default:
							notificationType.getItemAtIndex('1').setAttribute('selected', 'true');
							break;
						case '2':
							notificationType.getItemAtIndex('2').setAttribute('selected', 'true');
							break;
					}
				
				var buttonsBox = document.getAnonymousElementByAttribute(bound, 'id', 'buttonsBox');
				
				if (boycottPlus.newCampaign) {
					var bApplySuscribe = document.createElement('button');
						bApplySuscribe.setAttribute('label', 'Apply & Suscribe');
						bApplySuscribe.setAttribute('oncommand', 'boycottplus.doSuscribe();doCampaignDetailsChanges();window.close();');
						
					buttonsBox.appendChild(bApplySuscribe);
				} else {
					var bUnsuscribe = document.createElement('button');
					bUnsuscribe.setAttribute('label', 'Unsuscribe');
					bUnsuscribe.setAttribute('oncommand', 'boycottplus.doUnsuscribe("'+address+'");window.close();');
					
					var bApply = document.createElement('button');
						bApply.setAttribute('label', 'Apply');
						bApply.setAttribute('oncommand', 'doCampaignDetailsChanges();window.close();');
						
					buttonsBox.appendChild(bUnsuscribe);
					buttonsBox.appendChild(bApply);
				}

				var bCancel = document.createElement('button');
					bCancel.setAttribute('label', 'Cancel');
					bCancel.setAttribute('oncommand', 'window.close();');
				
				buttonsBox.appendChild(bCancel);
					
				// Change value of CollapseExpand label.
				changeCollapseExpand = function (el) {
					el.parentNode.parentNode.querySelector("vbox").classList.toggle("ruleHide");
					if (el.parentNode.parentNode.querySelector("vbox").classList.contains("ruleHide")) {
						el.setAttribute('value', '+');
					} else {
						el.setAttribute('value', '-');
					}
				};
				
				// Apply Changes.
				doCampaignDetailsChanges = function() {
					boycottplus.setDisplayChanges(address, displayChanges.hasAttribute("checked"));
					boycottplus.setSiteupdateFrecuency(address , frecuency.selectedItem.value);
					boycottplus.setSiteNotificationType(address, notificationType.selectedItem.value);
				};				

			]]></constructor>
		  <destructor><![CDATA[

		  ]]></destructor>
		</implementation>
	</binding>
</bindings>